name: Build

on:
  push:
  pull_request:

jobs:
  lint-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Lint backend
        uses: ./.github/actions/lint-backend

  test-backend:
    runs-on: ubuntu-latest
    needs: [lint-backend]

    services:
      postgres:
        image: postgres:alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: fief
          POSTGRES_PASSWORD: fiefpassword
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mariadb:
        image: mariadb
        ports:
          - 3306:3306
        env:
          MARIADB_ROOT_PASSWORD: fiefpassword

    strategy:
      fail-fast: false
      matrix:
        include:
          - database_type: POSTGRESQL
            database_host: localhost
            database_port: 5432
            database_username: fief
            database_password: fiefpassword
            database_ssl_mode: disable
          - database_type: MYSQL
            database_host: localhost
            database_port: 3306
            database_username: root
            database_password: fiefpassword
            database_ssl_mode: DISABLED
          - database_type: SQLITE
            database_host: null
            database_port: null
            database_username: null
            database_password: null
            database_ssl_mode: null

    steps:
      - uses: actions/checkout@v3
      - name: Test backend with ${{ matrix.database_type }} database
        uses: ./.github/actions/test-backend
        with:
          database_type: ${{ matrix.database_type }}
          database_host: ${{ matrix.database_host }}
          database_port: ${{ matrix.database_port }}
          database_username: ${{ matrix.database_username }}
          database_password: ${{ matrix.database_password }}
          database_name: fief

  test-admin-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Test admin frontend
        uses: ./.github/actions/test-admin-frontend

  build-admin-frontend:
    runs-on: ubuntu-latest
    needs: [test-admin-frontend]

    steps:
      - uses: actions/checkout@v3
      - name: Build admin frontend
        uses: ./.github/actions/build-admin-frontend

  pypi-release:
    runs-on: ubuntu-latest
    needs: [test-backend, build-admin-frontend]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        shell: bash
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"
      - name: Install Node dependencies
        shell: bash
        working-directory: backend
        run: |
          npm ci
      - name: Compile translations and build CSS
        shell: bash
        working-directory: backend
        run: |
          hatch run pybabel compile --domain=messages --directory=fief/locale
          npm run build:css
      - name: Download frontend build
        uses: actions/download-artifact@v2
        with:
          name: admin-frontend-build
          path: backend/fief/static/frontend
      - name: Build and publish on PyPI
        working-directory: backend
        env:
          HATCH_INDEX_USER: ${{ secrets.HATCH_INDEX_USER }}
          HATCH_INDEX_AUTH: ${{ secrets.HATCH_INDEX_AUTH }}
        run: |
          hatch build
          hatch publish
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          body: ${{ github.event.head_commit.message }}
          artifacts: backend/dist/*.whl,backend/dist/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    runs-on: ubuntu-latest
    needs: [pypi-release]

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - uses: actions/checkout@v3
      - name: Wait package to be truly available from PyPI
        shell: bash
        run: |
          sleep 120
      - name: Set raw version variable
        shell: bash
        run: |
          echo "${{ github.ref_name }}" | sed "s/v/RAW_VERSION=$1/" >>  $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          build-args: |
            FIEF_VERSION=${{ env.RAW_VERSION }}
          context: docker/
          platforms: linux/amd64, linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
